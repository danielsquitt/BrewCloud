type Company 
  @model
  @key(name: "companyByName", fields: ["name"], queryField: "companyByName")
  @auth(rules: [
    { allow: public, provider: iam, operations: [read] }
    { allow: groups, groupsField: "R_Group", operations: [ read ] }
  ])
{
  id : ID!
  name: String!
  initImg: S3Object 
  faviIcon: S3Object 
  devices: [Device] 
    @connection(keyName: "byCompanyId", fields: ["id"])
    @auth(rules: [
      { allow: groups, groupsField: "R_Group", operations: [ read ] },
      { allow: groups, groupsField: "CRUD_Group", operations: [ create, update, delete, read] }
      ])
  CRUD_Group: String
  R_Group:String
}

type Device
  @model(timestamps:{createdAt: "createdOn", updatedAt: "updatedOn"})
  @key(name: "byCompanyId", fields: ["companyId", "alias"], queryField: "deviceByCompanyId")
  @auth(rules: [
      { allow: groups, groups: ["Admin"] },
      { allow: groups, groupsField: "R_Group", operations: [ read ] },
      { allow: groups, groupsField: "CRUD_Group", operations: [ create, update, delete, read] }
      ])
 {
  id: ID!
  name: String!
  deviceTypeId: ID!
  deviceType: DeviceType
    @connection(fields: ["deviceTypeId"])
  companyId: ID!
  company: Company @connection(fields: ["companyId"])
  alias: String
  description: String
  connStatus: Boolean
  CRUD_Group: [String]
  R_Group: [String]
}

type DeviceType
  @model( subscriptions: null)
{
  id: ID!
  name: String!
  shadownName: String
  telemetryName: String
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}